<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <LangVersion>8.0</LangVersion>
    <Nullable>enable</Nullable>
    <IsPackable>true</IsPackable>
    <Copyright>Weknow Network ©</Copyright>
    <Authors>Weknow Network</Authors>
    <Company>Weknow Network</Company>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Version>1.0.1</Version>
    <PackageProjectUrl>https://www.weknow.network/</PackageProjectUrl>
    <RepositoryUrl>https://github.com/weknow-network/Weknow.Extensions.Configuration.Consul</RepositoryUrl>
    <RepositoryType>GitHub</RepositoryType>
    <PackageTags>Consul, Configuration, Setting, HashiCorp, ASP.NET, Micro-Service</PackageTags>
    <PackageReleaseNotes>Goals
The Goals of this implementation are:

Provide easy registration of Consul as .NET Configuration.
Seamless registration strong configuration type by convention.
Multi layer (hierarchical) configuration editing
Different aspect of same configuration unit can be edit on different layers.
The final configuration will be a merge of all the layers. The layers hierarchy is (example: logging activation may be set on different layers from general to specific layer):
Configuration Type [Required]: derived from the strong configuration class.
Tenant [Optional]: organization level (support for multi tenant).
Enable to mutate configuration at the Tenant level.
Application / Micro-Service [Optional]: application or micro-service level. Enable to mutate configuration at the Application / Micro-Service level.
Namespace [Optional]: enable to mutate the configuration on each level of a namespace.
Component [Optional]: enable to mutate the configuration for specific consumer class.
Auto reload configuration (the reload cycle will be configurable).</PackageReleaseNotes>
    <Description>This package provide distributed configuration implementation 
by using HashiCorp’s Consul as the configuration storage, 
via .NET Core configuration system.
 
The Goals are:
- Provide easy registration of Consul as .NET Configuration.
- Seamless registration of strong type configuration via naming convention.
- Multi-layer (hierarchical) configuration editing
    Different aspect of same configuration unit can be spread 
    across different layers / hierarchic (like: tenant, service level, environment, namespace).
    The final configuration will be a merge of data across all layers.
    Layers:
  - Configuration Type [Required]: represent a strong configuration class.
  - Tenant [Optional]: organization level (support for multi-tenant).
     Enable to mutate configuration at the Tenant level.
  - Application / Micro-Service [Optional]: application or micro-service level. 
    Enable to mutate configuration at the Application / Micro-Service level.
  - Namespace [Optional]: enable to mutate the configuration on each level of a namespace.
  - Component [Optional]: enable to mutate the configuration for specific consumer class.
- Auto reload configuration when configuration has changed (the reload cycle will be configurable).

Credits (Projects &amp; article which inspire / help in building this library):
- HashiCorp Consul: backbone of the configuration, provide the actual configuration management.
- Winton.Extensions.Configuration.Consul: quite similar project, this library use some parts of it.
- The confusion of ASP.NET Configuration with environment variables: https://medium.com/@gparlakov/the-confusion-of-asp-net-configuration-with-environment-variables-c06c545ef732.
- Dynamic ASP.NET Core Configurations With Consul KV: https://www.c-sharpcorner.com/article/dynamic-asp-net-core-configurations-with-consul-kv/
- USING CONSUL FOR STORING THE CONFIGURATION IN ASP.NET CORE: https://www.natmarchand.fr/consul-configuration-aspnet-core/
</Description>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Consul" Version="0.7.2.6" />
    <PackageReference Include="Microsoft.Extensions.Configuration" Version="3.1.2" />
    <PackageReference Include="Microsoft.Extensions.Configuration.EnvironmentVariables" Version="3.1.2" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="3.1.2" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="3.1.2" />
    <PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" Version="3.1.2" />
  </ItemGroup>

</Project>
